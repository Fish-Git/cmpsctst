-------------------------------------------------------------------------------
(quick tests)

-c  -z 0:0  -b 0:0  -v -a 0 -w 8 -i .\FILES\SMALL\EBCDIC\SMP-E_0C4\SMPE-0C4.bin -o .\WORK\cmpout.bin -d .\dicts\FMT-1\CDSS-5\FishTest\DICT.15C -x .\dicts\FMT-1\CDSS-5\FishTest\DICT.15E -1 -s 5
-e  -z 0:0  -b 0:0  -v -a 0 -w 8 -i .\WORK\cmpout.bin                           -o .\WORK\expout.txt -d .\dicts\FMT-1\CDSS-5\FishTest\DICT.15C -x .\dicts\FMT-1\CDSS-5\FishTest\DICT.15E -1 -s 5

-c -a 1:0 -v -i 2228:3304:.\FILES\SMALL\EBCDIC\TSTCMPSC\TSTCMPSC-EBCDIC.txt -o 4353:1668:.\WORK\cmpout.bin -d .\DICTS\FMT-1\CDSS-5\FishTest\DICT.15C -x .\DICTS\FMT-1\CDSS-5\FishTest\DICT.15E -1 -s 5 -z 0:0 -w 8 -b 0:1  >  .\WORK\c-cmp2base.txt
-e -a 1:0 -v -i 2228:3304:.\WORK\cmpout.bin                                 -o 4353:1668:.\WORK\expout.txt -d .\DICTS\FMT-1\CDSS-5\FishTest\DICT.15C -x .\DICTS\FMT-1\CDSS-5\FishTest\DICT.15E -1 -s 5 -z 0:0 -w 8 -b 0:1  >  .\WORK\e-cmp2base.txt

-------------------------------------------------------------------------------

  TODO!   write protect the entire input buffer before calling the CMPSC
          instruction function to detect buggy implementations that may,
          as a result of a bug, try modifying it (and then unprotect it
          afterwards of course, so existing cmpsctst logic can proceed
          normally). The input buffer to the CMPSC instruction should
          NEVER be modified by the instruction. It is read-only. Same
          with the compression/expansion dictionaries themselves: they
          should be considered read-only. We should write protect them
          to detect any attempt to modify them.

-------------------------------------------------------------------------------

  TODO!   check registers: R0 shouldn't change, only the CBN field of R1 may
          change, R2 and R4 should never point outside their buffers, and R3
          and R5 should always equal the end of buffer minus buffer pointer.
          No other registers should be modified. We should maybe also check
          to make sure only the lower 32 bits of the registers are modified
          when running in S/390 mode (as opposed to 64-bit z/Arch. mode).

-------------------------------------------------------------------------------

  TODO?   add option to randomly generate ASCII/EBCDIC test data. How best
          to do it is debatable. One way is to select random length strings
          from a template file. Another is to simply generate random ASCII
          or EBCDIC bytes. Note: we'll also need a min-max size option too.

-------------------------------------------------------------------------------

  TODO?   Run the test in a secondary thread and have the main thread
          monitor the secondary thread to detect when an algorithm is
          stuck in a loop. Will need new -m max duration seconds option.
          Main thread waits for signal from secondary thread indicating
          it has finished. If signal not received within specified time,
          cancel the secondary thread.

-------------------------------------------------------------------------------

  Tool to create/verify dictionaries?         (reverse engineer BDICT?)
  Tool to create specific dictionary errors?  (e.g. 0C7)

-------------------------------------------------------------------------------

  TODO?   Debugging functions: each call? on demand?
          Snap cpuamt, cdss, f1, st.
          Snap input buffer, cbn, output buffer, cbn, pic, cc.
          Snap dictionaries and symbol table
          Formatted dictionaries snap.
            How to interpret entries? (How do you detect SD's?!)

-------------------------------------------------------------------------------
